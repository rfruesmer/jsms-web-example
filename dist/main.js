/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@log4js-node/log4js-api/lib/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@log4js-node/log4js-api/lib/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\nclass Logger {\n\n  log() {}\n\n  isLevelEnabled() {\n    return false;\n  }\n\n  addContext() {}\n  removeContext() {}\n  clearContext() {}\n}\n\n[ 'Trace', 'Debug', 'Info', 'Warn', 'Error', 'Fatal', 'Mark' ].forEach((level) => {\n\n  Logger.prototype[level.toLowerCase()] = () => {};\n  Logger.prototype[`is${level}Enabled`] = () => false;\n\n});\n\nconst checkForLog4js = () => {\n  try {\n    return require('log4js');\n  } catch (e) {\n    return null;\n  }\n};\n\nconst log4js = checkForLog4js();\nconst loggerFn =  log4js ? log4js.getLogger : () => new Logger();\n\nmodule.exports = {\n  getLogger: loggerFn\n};\n\n\n//# sourceURL=webpack:///./node_modules/@log4js-node/log4js-api/lib/index.js?");

/***/ }),

/***/ "./node_modules/jsms/dist/index.umd.js":
/*!*********************************************!*\
  !*** ./node_modules/jsms/dist/index.umd.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n     true ? factory(exports, __webpack_require__(/*! uuid */ \"./node_modules/uuid/index.js\"), __webpack_require__(/*! @log4js-node/log4js-api */ \"./node_modules/@log4js-node/log4js-api/lib/index.js\")) :\n    undefined;\n}(this, function (exports, uuid, log4jsApi) { 'use strict';\n\n    function checkState(condition, message = \"\") {\r\n        if (!condition) {\r\n            throw new Error(\"Illegal state: \" + message);\r\n        }\r\n    }\r\n    function checkArgument(condition, message = \"\") {\r\n        if (!condition) {\r\n            throw new Error(\"Illegal argument: \" + message);\r\n        }\r\n    }\n\n    /**\r\n     *  A Connection object is a client's active connection to its JSMS provider\r\n     */\r\n    class JsmsConnection {\r\n        constructor() {\r\n            this.queues = new Map();\r\n            this.topics = new Map();\r\n            this.producers = new Map();\r\n            this.consumers = new Map();\r\n        }\r\n        addQueue(queue, producer, consumer) {\r\n            checkState(!this.queues.has(queue.getName()), \"A queue with the same name is already registered\");\r\n            this.queues.set(queue.getName(), queue);\r\n            this.producers.set(queue, producer);\r\n            this.consumers.set(queue, consumer);\r\n        }\r\n        addTopic(topic, producer, consumer) {\r\n            checkState(!this.topics.has(topic.getName()), \"A topic with the same name is already registered\");\r\n            this.topics.set(topic.getName(), topic);\r\n            this.producers.set(topic, producer);\r\n            this.consumers.set(topic, consumer);\r\n        }\r\n        getDestinationFor(channel) {\r\n            let destination = this.queues.get(channel);\r\n            if (!destination) {\r\n                destination = this.topics.get(channel);\r\n            }\r\n            checkState(!!destination, \"Unknown channel: \" + channel);\r\n            // @ts-ignore: check for undefined already done before via checkState\r\n            return destination;\r\n        }\r\n        /**\r\n         * Returns the message consumer of the specified destination.\r\n         */\r\n        getConsumer(destination) {\r\n            checkArgument(this.consumers.has(destination));\r\n            // @ts-ignore: check for undefined already done before via checkArgument\r\n            return this.consumers.get(destination);\r\n        }\r\n        /**\r\n         * Returns the message producer of the specified destination.\r\n         */\r\n        getProducer(destination) {\r\n            checkArgument(this.producers.has(destination));\r\n            // @ts-ignore: check for undefined already done before via checkArgument\r\n            return this.producers.get(destination);\r\n        }\r\n        /**\r\n         *  Closes the connection.\r\n         *\r\n         *  Since a provider typically allocates significant resources on behalf\r\n         *  of a connection, clients should close these resources when they are\r\n         *  not needed.\r\n         */\r\n        close() {\r\n            this.queues.forEach((queue) => queue.close());\r\n            this.topics.forEach((topic) => topic.close());\r\n        }\r\n    }\n\n    /**\r\n     * Common abstraction for queues and topics.\r\n     */\r\n    class JsmsDestination {\r\n        constructor(name) {\r\n            this.name = name;\r\n        }\r\n        /**\r\n         * Gets the name of this queue.\r\n         */\r\n        getName() {\r\n            return this.name;\r\n        }\r\n    }\n\n    /**\r\n     *  JsmsQueue is used for point-to-point (PTP) messaging:\r\n     *\r\n     *  * Each queue/message has only one consumer\r\n     *\r\n     *  * A sender and a receiver of a message have no timing dependencies.\r\n     *    The receiver can fetch the message whether or not it was running\r\n     *    when the client sent the message.\r\n     *\r\n     *  * Queues retain all (up to maxSize) messages sent to them until\r\n     *    the messages are consumed, the message expires or the queue is\r\n     *    closed - messages aren't persisted.\r\n     *\r\n     *  Use PTP messaging when every message you send must be processed\r\n     *  successfully by one consumer.\r\n     *\r\n     */\r\n    class JsmsQueue extends JsmsDestination {\r\n        constructor(name) {\r\n            super(name);\r\n            this.entries = [];\r\n            this.expiredListeners = new Array();\r\n            this.removeExpiredMessages = () => {\r\n                const currentTimeMillis = new Date().getTime();\r\n                this.entries\r\n                    .filter((message) => message.header.expiration > 0 && currentTimeMillis > message.header.expiration)\r\n                    .map((message) => this.entries.indexOf(message))\r\n                    .forEach((index) => {\r\n                    const removedMessages = this.entries.splice(index, 1);\r\n                    this.expiredListeners.forEach((listener) => listener(removedMessages[0]));\r\n                });\r\n            };\r\n            this.maintenanceInterval = setInterval(this.removeExpiredMessages, 1000);\r\n        }\r\n        enqueue(message) {\r\n            checkArgument(message.header.channel === this.getName());\r\n            this.entries.push(message);\r\n        }\r\n        dequeue() {\r\n            this.removeExpiredMessages();\r\n            return this.entries.shift();\r\n        }\r\n        addMessageExpiredListener(listener) {\r\n            if (this.expiredListeners.indexOf(listener) === -1) {\r\n                this.expiredListeners.push(listener);\r\n            }\r\n        }\r\n        close() {\r\n            clearInterval(this.maintenanceInterval);\r\n        }\r\n    }\n\n    /**\r\n     *  Implements publish/subscribe messaging:\r\n     *\r\n     *  * Topics take care of distributing the messages arriving from\r\n     *    multiple publishers to its multiple subscribers.\r\n     *\r\n     *  * Topics retain messages only as long as it takes to distribute\r\n     *    them to current subscribers.\r\n     *\r\n     *  * Each message may have multiple consumers.\r\n     *\r\n     *  * Publishers and subscribers have a timing dependency. A client\r\n     *    that subscribes to a topic can consume only messages published\r\n     *    after the client has created a subscription, and the subscriber\r\n     *    must continue to be active in order for it to consume messages.\r\n     *\r\n     */\r\n    class JsmsTopic extends JsmsDestination {\r\n        constructor(name) {\r\n            super(name);\r\n            this.subscribers = new Array();\r\n        }\r\n        subscribe(subscriber) {\r\n            if (this.subscribers.indexOf(subscriber) === -1) {\r\n                this.subscribers.push(subscriber);\r\n            }\r\n        }\r\n        unsubscribe(subscriber) {\r\n            const index = this.subscribers.indexOf(subscriber);\r\n            if (index >= 0) {\r\n                this.subscribers.splice(index, 1);\r\n            }\r\n        }\r\n        getSubscribers() {\r\n            return [...this.subscribers];\r\n        }\r\n        close() {\r\n            // do nothing\r\n        }\r\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------\r\n    /**\r\n     *  Utility class for handling ECMAScript promises.\r\n     */\r\n    class JsmsDeferred {\r\n        constructor() {\r\n            // this.debugId = JsmsDeferred.debugIdCounter++;\r\n            this._promise = new Promise((resolve, reject) => {\r\n                this.resolvePromise = resolve;\r\n                this.rejectPromise = reject;\r\n            });\r\n            this._promise.then((value) => {\r\n                try {\r\n                    // console.log(\"Resolved: #\" + this.debugId);\r\n                    const thenResult = this.thenCallback ? this.thenCallback(value) : undefined;\r\n                    if (this.resolveDeferred && this.resolveDeferred.thenCallback) {\r\n                        this.resolveDeferred.resolve(thenResult);\r\n                    }\r\n                    if (this.thenDeferred) {\r\n                        this.thenDeferred.resolve(thenResult);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    this.resolveDeferred.reject(e);\r\n                }\r\n            }, (reason) => {\r\n                // console.error(\"Rejected: #\" + this.debugId);\r\n                if (this.catchCallback) {\r\n                    this.catchCallback(reason);\r\n                }\r\n                if (this.thenDeferred) {\r\n                    this.thenDeferred.reject(reason);\r\n                }\r\n            });\r\n            // .catch((reason: any) => {\r\n            //     console.error(\"Caught: #\" + this.debugId);\r\n            // })\r\n            // .finally(() => {\r\n            //     console.log(\"Finally: #\" + this.debugId);\r\n            // });\r\n        }\r\n        get promise() {\r\n            return this._promise;\r\n        }\r\n        /**\r\n         *  Resolves the promise with the given value.\r\n         *\r\n         *  @param value Argument to be resolved by this deferred - Promise or\r\n         *               thenable not supported (yet).\r\n         */\r\n        resolve(value) {\r\n            // console.log(\"Resolving: #\" + this.debugId);\r\n            this.resolvePromise(value);\r\n            this.resolveDeferred = new JsmsDeferred();\r\n            return this.resolveDeferred;\r\n        }\r\n        /**\r\n         *  Rejects the promise with the given reason.\r\n         *\r\n         *  @param reason Reason why the promise is rejected.\r\n         */\r\n        reject(reason) {\r\n            this.rejectPromise(reason);\r\n        }\r\n        /**\r\n         *  Chains this deferred to the given then callback.\r\n         *\r\n         *  @param callback the function to call when the promise is fullfilled\r\n         */\r\n        then(callback) {\r\n            // console.log(\"Chaining: #\" + this.debugId);\r\n            this.thenCallback = callback;\r\n            this.thenDeferred = new JsmsDeferred();\r\n            return this.thenDeferred;\r\n        }\r\n        /**\r\n         *  Chains this deferred to the given catch handler. In sake of simplicity,\r\n         *  it doesn't return anything - therefore it can't be chained.\r\n         *\r\n         *  @param callback a function called when the promise is rejected\r\n         */\r\n        catch(callback) {\r\n            this.catchCallback = callback;\r\n        }\r\n        intercept() {\r\n            const thenDeferred = this.thenDeferred;\r\n            this.thenDeferred = undefined;\r\n            return thenDeferred;\r\n        }\r\n    }\n\n    /**\r\n     * Header fields contain values used by both clients and providers to identify\r\n     * and route messages.\r\n     */\r\n    class JsmsMessageHeader {\r\n        /**\r\n         * @param channel The topic or queue name.\r\n         * @param timeToLive The time in milliseconds (from now) until this message will be discarded.\r\n         * @param correlationID Used for matching replies/responses to original message.\r\n         */\r\n        constructor(channel, timeToLive, correlationID) {\r\n            this.id = uuid.v4();\r\n            this.channel = channel;\r\n            this.expiration = timeToLive > 0 ? new Date().getTime() + timeToLive : 0;\r\n            this.correlationID = correlationID;\r\n        }\r\n    }\n\n    /**\r\n     * The Message class is the root class of all JSMS messages.\r\n     */\r\n    class JsmsMessage {\r\n        constructor(header, body) {\r\n            this.header = header;\r\n            this.body = body;\r\n        }\r\n        /**\r\n         * Convenience factory method for creation of JSMS messages.\r\n         *\r\n         * @param channel The topic or queue name.\r\n         * @param body The message's payload.\r\n         * @param timeToLive The time in milliseconds (from now) until this message will be discarded.\r\n         * @param correlationID Used for matching replies/responses to original message.\r\n         */\r\n        static create(channel, body = {}, timeToLive = 0, correlationID = uuid.v4()) {\r\n            return new JsmsMessage(new JsmsMessageHeader(channel, timeToLive, correlationID), body);\r\n        }\r\n        /**\r\n         * Convenience factory method for creating a response.\r\n         *\r\n         * @param channel The topic or queue name.\r\n         * @param body The message's payload.\r\n         * @param timeToLive The time in milliseconds (from now) until this message will be discarded.\r\n         * @param correlationID Used for matching replies/responses to original message.\r\n         */\r\n        static createResponse(originalMessage, responseBody = {}, timeToLive = 0) {\r\n            return JsmsMessage.create(originalMessage.header.channel, responseBody, timeToLive, originalMessage.header.correlationID);\r\n        }\r\n        isExpired() {\r\n            return this.header.expiration > 0 ? new Date().getTime() > this.header.expiration : false;\r\n        }\r\n    }\n\n    /**\r\n     * A client uses a MessageConsumer object to receive messages from a destination.\r\n     */\r\n    class JsmsMessageConsumer {\r\n        constructor(connection, destination) {\r\n            this.connection = connection;\r\n            this.destination = destination;\r\n        }\r\n        getDestination() {\r\n            return this.destination;\r\n        }\r\n    }\n\n    class JsQueueReceiver extends JsmsMessageConsumer {\r\n        constructor(connection, destination) {\r\n            super(connection, destination);\r\n            this.deferredDeliveries = new Array();\r\n            this.deferredResponses = new Map();\r\n            this.queue.addMessageExpiredListener((message) => {\r\n                const deferredResponse = this.dequeueResponseFor(message);\r\n                deferredResponse.reject(\"message expired\");\r\n            });\r\n        }\r\n        receive() {\r\n            const deferredDelivery = new JsmsDeferred();\r\n            const message = this.queue.dequeue();\r\n            if (message) {\r\n                this.deliverTo(deferredDelivery, message, this.dequeueResponseFor(message));\r\n            }\r\n            else {\r\n                this.enqueueDelivery(deferredDelivery);\r\n            }\r\n            return deferredDelivery;\r\n        }\r\n        get queue() {\r\n            return this.getDestination();\r\n        }\r\n        dequeueResponseFor(message) {\r\n            const response = this.deferredResponses.get(message.header.id);\r\n            this.deferredResponses.delete(message.header.id);\r\n            // @ts-ignore: response is guaranteed to be defined\r\n            return response;\r\n        }\r\n        deliverTo(deferredDelivery, message, deferredResponse) {\r\n            const interceptedDeliverySuccessor = deferredDelivery.intercept();\r\n            deferredDelivery.resolve(message)\r\n                .then((responseBody) => {\r\n                const response = JsmsMessage.createResponse(message, responseBody ? responseBody : {});\r\n                this.resolve(deferredResponse, response, interceptedDeliverySuccessor);\r\n            })\r\n                .catch((reason) => {\r\n                deferredResponse.reject(reason);\r\n            });\r\n        }\r\n        resolve(deferredResponse, response, interceptedDeliverySuccessor) {\r\n            const interceptedResponseSuccessor = deferredResponse.intercept();\r\n            deferredResponse.resolve(response)\r\n                .then((nextResponseBody) => {\r\n                if (interceptedDeliverySuccessor\r\n                    && interceptedResponseSuccessor) {\r\n                    const nextResponse = JsmsMessage.createResponse(response, nextResponseBody ? nextResponseBody : {});\r\n                    this.deliverTo(interceptedDeliverySuccessor, nextResponse, interceptedResponseSuccessor);\r\n                }\r\n            });\r\n        }\r\n        enqueueDelivery(deferredDelivery) {\r\n            this.deferredDeliveries.push(deferredDelivery);\r\n        }\r\n        onMessage(message) {\r\n            const deferredResponse = new JsmsDeferred();\r\n            if (!this.validate(message, deferredResponse)) {\r\n                return deferredResponse;\r\n            }\r\n            const deferredDelivery = this.dequeueDelivery();\r\n            if (deferredDelivery) {\r\n                this.deliverTo(deferredDelivery, message, deferredResponse);\r\n            }\r\n            else {\r\n                this.enqueue(message, deferredResponse);\r\n            }\r\n            return deferredResponse;\r\n        }\r\n        validate(message, deferredResponse) {\r\n            if (message.header.channel !== this.getDestination().getName()) {\r\n                deferredResponse.reject(\"invalid channel\");\r\n                return false;\r\n            }\r\n            if (message.isExpired()) {\r\n                deferredResponse.reject(\"message expired\");\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        dequeueDelivery() {\r\n            return this.deferredDeliveries.shift();\r\n        }\r\n        enqueue(message, deferredResponse) {\r\n            this.queue.enqueue(message);\r\n            this.deferredResponses.set(message.header.id, deferredResponse);\r\n        }\r\n        /** NO public API - only used for testing */\r\n        isEmpty() {\r\n            return this.deferredDeliveries.length === 0\r\n                && this.deferredResponses.size === 0;\r\n        }\r\n    }\n\n    /**\r\n     *  A client uses a MessageProducer object to send messages to a destination.\r\n     */\r\n    class JsmsMessageProducer {\r\n        constructor(connection, destination) {\r\n            this.connection = connection;\r\n            this.destination = destination;\r\n        }\r\n        getConnection() {\r\n            return this.connection;\r\n        }\r\n        getDestination() {\r\n            return this.destination;\r\n        }\r\n    }\n\n    class JsQueueSender extends JsmsMessageProducer {\r\n        constructor(connection, destination) {\r\n            super(connection, destination);\r\n        }\r\n        send(message) {\r\n            // since this an in-process producer, it can directly dispatch to the consumer\r\n            const destination = this.getDestination();\r\n            const consumer = this.getConnection().getConsumer(destination);\r\n            return consumer.onMessage(message);\r\n        }\r\n    }\n\n    class JsTopicPublisher extends JsmsMessageProducer {\r\n        constructor(connection, destination) {\r\n            super(connection, destination);\r\n            this.logger = log4jsApi.getLogger(\"jsms\");\r\n        }\r\n        send(message) {\r\n            const deferred = new JsmsDeferred();\r\n            this.sendToTopic(message, deferred);\r\n            return deferred;\r\n        }\r\n        sendToTopic(message, deferred) {\r\n            const topic = this.getDestination();\r\n            topic.getSubscribers().forEach(subscriber => {\r\n                try {\r\n                    subscriber(message);\r\n                }\r\n                catch (error) {\r\n                    this.logger.error(error);\r\n                }\r\n            });\r\n            deferred.resolve(message);\r\n        }\r\n    }\n\n    class JsTopicSubscriber extends JsmsMessageConsumer {\r\n        constructor(connection, destination) {\r\n            super(connection, destination);\r\n        }\r\n        receive() {\r\n            return this.receiveTopicMessage();\r\n        }\r\n        receiveTopicMessage() {\r\n            const receiver = new JsmsDeferred();\r\n            const topic = this.getDestination();\r\n            topic.subscribe((message) => {\r\n                receiver.resolve(message);\r\n            });\r\n            return receiver;\r\n        }\r\n        onMessage(message) {\r\n            this.sendToTopic(message);\r\n            const deferred = new JsmsDeferred();\r\n            deferred.resolve(message);\r\n            return deferred;\r\n        }\r\n        sendToTopic(message) {\r\n            const topic = this.getDestination();\r\n            topic.getSubscribers().forEach(subscriber => {\r\n                subscriber(message);\r\n            });\r\n        }\r\n    }\n\n    /**\r\n     * The JsConnection allows clients to connect to each other inside the\r\n     * JavaScript environment without the overhead of network communication.\r\n     */\r\n    class JsConnection extends JsmsConnection {\r\n        createQueue(queueName) {\r\n            const queue = new JsmsQueue(queueName);\r\n            super.addQueue(queue, new JsQueueSender(this, queue), new JsQueueReceiver(this, queue));\r\n            return queue;\r\n        }\r\n        createTopic(topicName) {\r\n            const topic = new JsmsTopic(topicName);\r\n            super.addTopic(topic, new JsTopicPublisher(this, topic), new JsTopicSubscriber(this, topic));\r\n            return topic;\r\n        }\r\n    }\n\n    /**\r\n     *  Convenience facade for simple interaction with the message system.\r\n     *\r\n     *  Current limitations:\r\n     *\r\n     * * Queue- and topic names must be unique, meaning that a queue\r\n     *   cannot share the same name with a topic and vice versa.\r\n     *\r\n     */\r\n    class JsmsService {\r\n        constructor() {\r\n            this.defaultConnection = new JsConnection();\r\n            this.connections = new Map();\r\n            this.queues = new Map();\r\n            this.topics = new Map();\r\n        }\r\n        /**\r\n         *  Sends a message to the specified queue.\r\n         *\r\n         *  Note: if the queue doesn't exist yet, a new queue using the default\r\n         *  JsConnection will be created.\r\n         *\r\n         *  @returns a deferred promise that represents the response. If the\r\n         *           listener doen't reply, the response body will be empty.\r\n         *           If the message is invalid (e.g. expired) the promise will be\r\n         *           rejected.\r\n         */\r\n        send(queueName, messageBody = {}, timeToLive = 0) {\r\n            const queue = this.getQueue(queueName);\r\n            const connection = this.getConnection(queue);\r\n            const producer = connection.getProducer(queue);\r\n            const message = JsmsMessage.create(queueName, messageBody, timeToLive);\r\n            try {\r\n                return producer.send(message);\r\n            }\r\n            catch (e) {\r\n                return this.retry(message, producer);\r\n            }\r\n        }\r\n        retry(message, producer, deferredRetry = new JsmsDeferred(), retryCount = 0) {\r\n            setTimeout(() => {\r\n                try {\r\n                    const deferredResponse = producer.send(message);\r\n                    deferredResponse.then((response) => {\r\n                        deferredRetry.resolve(response);\r\n                    });\r\n                }\r\n                catch (e) {\r\n                    if (message.isExpired()) {\r\n                        deferredRetry.reject(\"message expired\");\r\n                    }\r\n                    else if (retryCount > JsmsService.MAX_RETRIES) {\r\n                        deferredRetry.reject(\"exceeded max retries\");\r\n                    }\r\n                    else {\r\n                        this.retry(message, producer, deferredRetry, retryCount + 1);\r\n                    }\r\n                }\r\n            }, JsmsService.RETRY_INTERVAL);\r\n            return deferredRetry;\r\n        }\r\n        /** NO public API - only public visible for testing */\r\n        getQueue(queueName) {\r\n            let queue = this.queues.get(queueName);\r\n            if (!queue) {\r\n                queue = this.createQueue(queueName);\r\n            }\r\n            return queue;\r\n        }\r\n        /** NO public API - only public visible for testing */\r\n        getConnection(destination) {\r\n            const connection = this.connections.get(destination);\r\n            // @ts-ignore: connection is guaranteed to be valid here\r\n            return connection;\r\n        }\r\n        /**\r\n         *  Creates a new queue for the given connection on this node.\r\n         */\r\n        createQueue(queueName, connection = this.defaultConnection) {\r\n            checkState(!this.queues.has(queueName));\r\n            const queue = connection.createQueue(queueName);\r\n            this.queues.set(queueName, queue);\r\n            this.connections.set(queue, connection);\r\n            return queue;\r\n        }\r\n        /**\r\n         *  Receives the next message from the given queue.\r\n         */\r\n        receive(queueName) {\r\n            const queue = this.getQueue(queueName);\r\n            const connection = this.getConnection(queue);\r\n            const consumer = connection.getConsumer(queue);\r\n            return consumer.receive();\r\n        }\r\n        /**\r\n         *  Registers a callback function on the given topic.\r\n         *\r\n         *  Note: if the topic doesn't exist yet, a new topic using the default\r\n         *  JsConnection will be created.\r\n         */\r\n        subscribe(topicName, subscriber) {\r\n            const topic = this.getTopic(topicName);\r\n            topic.subscribe(subscriber);\r\n        }\r\n        getTopic(topicName) {\r\n            let topic = this.topics.get(topicName);\r\n            if (!topic) {\r\n                topic = this.createTopic(topicName);\r\n            }\r\n            return topic;\r\n        }\r\n        /**\r\n         *  Creates a new topic for the given connection on this node.\r\n         */\r\n        createTopic(topicName, connection = this.defaultConnection) {\r\n            checkState(!this.topics.has(topicName));\r\n            const topic = connection.createTopic(topicName);\r\n            this.topics.set(topicName, topic);\r\n            this.connections.set(topic, connection);\r\n            return topic;\r\n        }\r\n        /**\r\n         *  Publishes a message to the given topic.\r\n         *\r\n         *  Note: if the topic doesn't exist yet, a new topic using the default\r\n         *  JsConnection will be created.\r\n         *\r\n         *  @returns a deferred promise that represents the original message - it\r\n         *           will be resolved as soon as the message has been sent to all\r\n         *           subscribers.\r\n         */\r\n        publish(topicName, messageBody = {}) {\r\n            const topic = this.getTopic(topicName);\r\n            const connection = this.getConnection(topic);\r\n            const producer = connection.getProducer(topic);\r\n            const message = JsmsMessage.create(topicName, messageBody);\r\n            producer.send(message);\r\n        }\r\n        /**\r\n         *  Unsubscribes the listener from the specified topic.\r\n         */\r\n        unsubscribe(topicName, subscriber) {\r\n            const topic = this.topics.get(topicName);\r\n            if (topic) {\r\n                topic.unsubscribe(subscriber);\r\n            }\r\n        }\r\n        /**\r\n         *  Releases all resources allocated by this service.\r\n         */\r\n        close() {\r\n            this.connections.forEach((connection) => connection.close());\r\n        }\r\n    }\r\n    JsmsService.MAX_RETRIES = 60;\r\n    JsmsService.RETRY_INTERVAL = 100;\n\n    exports.JsConnection = JsConnection;\n    exports.JsQueueReceiver = JsQueueReceiver;\n    exports.JsQueueSender = JsQueueSender;\n    exports.JsTopicPublisher = JsTopicPublisher;\n    exports.JsTopicSubscriber = JsTopicSubscriber;\n    exports.JsmsConnection = JsmsConnection;\n    exports.JsmsDeferred = JsmsDeferred;\n    exports.JsmsDestination = JsmsDestination;\n    exports.JsmsMessage = JsmsMessage;\n    exports.JsmsMessageConsumer = JsmsMessageConsumer;\n    exports.JsmsMessageHeader = JsmsMessageHeader;\n    exports.JsmsMessageProducer = JsmsMessageProducer;\n    exports.JsmsQueue = JsmsQueue;\n    exports.JsmsService = JsmsService;\n    exports.JsmsTopic = JsmsTopic;\n    exports.checkArgument = checkArgument;\n    exports.checkState = checkState;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n//# sourceURL=webpack:///./node_modules/jsms/dist/index.umd.js?");

/***/ }),

/***/ "./node_modules/uuid/index.js":
/*!************************************!*\
  !*** ./node_modules/uuid/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var v1 = __webpack_require__(/*! ./v1 */ \"./node_modules/uuid/v1.js\");\nvar v4 = __webpack_require__(/*! ./v4 */ \"./node_modules/uuid/v4.js\");\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n\n\n//# sourceURL=webpack:///./node_modules/uuid/index.js?");

/***/ }),

/***/ "./node_modules/uuid/lib/bytesToUuid.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/lib/bytesToUuid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n\n\n//# sourceURL=webpack:///./node_modules/uuid/lib/bytesToUuid.js?");

/***/ }),

/***/ "./node_modules/uuid/lib/rng-browser.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/lib/rng-browser.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\n\n//# sourceURL=webpack:///./node_modules/uuid/lib/rng-browser.js?");

/***/ }),

/***/ "./node_modules/uuid/v1.js":
/*!*********************************!*\
  !*** ./node_modules/uuid/v1.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var rng = __webpack_require__(/*! ./lib/rng */ \"./node_modules/uuid/lib/rng-browser.js\");\nvar bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ \"./node_modules/uuid/lib/bytesToUuid.js\");\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n\n\n//# sourceURL=webpack:///./node_modules/uuid/v1.js?");

/***/ }),

/***/ "./node_modules/uuid/v4.js":
/*!*********************************!*\
  !*** ./node_modules/uuid/v4.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var rng = __webpack_require__(/*! ./lib/rng */ \"./node_modules/uuid/lib/rng-browser.js\");\nvar bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ \"./node_modules/uuid/lib/bytesToUuid.js\");\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n\n\n//# sourceURL=webpack:///./node_modules/uuid/v4.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jsms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsms */ \"./node_modules/jsms/dist/index.umd.js\");\n/* harmony import */ var jsms__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsms__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\nfunction dumpObject(object) {\r\n    console.log(object);\r\n\r\n    const element = document.createElement('div');\r\n    element.innerHTML = JSON.stringify(object);\r\n    document.body.appendChild(element);\r\n}\r\n\r\n\r\nconst messageService = new jsms__WEBPACK_IMPORTED_MODULE_0__[\"JsmsService\"]();\r\n\r\nmessageService.receive(\"/some/queue\")\r\n    .then((message) => {\r\n        dumpObject(message.body);\r\n        // expected output: {request: \"foo\"}\r\n\r\n        return {response: \"ACK\"};\r\n    });\r\n\r\nmessageService.send(\"/some/queue\", {request: \"foo\"})\r\n    .then((response) => {\r\n        dumpObject(response.body);\r\n        // expected output: {response: \"ACK\"}\r\n    });\r\n\r\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });